## serviced aliases
## managed by salt do not edit by hand
IMG_DIR='/vagrant/docker_images'

alias s='serviced'
alias ss='s service'
alias ssa='ss attach'
alias ssaz='ss attach zope'
alias ssl='ss list'
alias ssr='ss run'
alias ssrz='ssr zope'
alias sss='ss status'
alias st='s template'
alias stl='st list'
alias std='st deploy'
alias snapshot="s snapshot add $(sss 2>/dev/null|grep Zenoss|grep develop|awk '{print $2}')"
alias lssnap="s snapshot list $(sss 2>/dev/null|grep Zenoss|grep develop|awk '{print $2}')"
alias rollback="s snapshot rollback"
alias rmsnap="s snapshot rm"
alias lszoperun="ss list --format '{{range $key, $val := .Runs}} {{$key}}: {{$val}}  {{end}}' zope"
alias hbasestop="serviced service stop hbase"
alias hbasestart="serviced service start hbase"

# Zenoss
alias zenossID="sss|grep develop|grep Zenoss|awk '{print $2}'"
alias startZenoss="ss start $(zenossID)"
alias stopZenoss="ss stop $(zenossID)"
alias restartZenoss="ss restart $(zenossID)"
alias zenhubDebug="sa zenhub su - zenoss -c 'zenhub debug'"

# Tmux
alias tks="tmux kill-session"
alias mz="mux zenoss"

function zope () {
   #alias zope='ssa zope su zenoss -l'
   if [ "$#" -gt 0 ]; then
       quoted_args="$(printf " %q" "$@")" # Note: this will have a leading space before the first arg
       ssa zope su zenoss -l -c "$quoted_args"
   else
       ssa zope su zenoss -l
   fi

}

function zenhub () {
   quoted_args="$(printf " %q" "$@")" # Note: this will have a leading space before the first arg
   ss attach zenhub su zenoss -l -c "ps -axu|grep '^zenoss'|grep zenhub.py|grep -v bash|grep python|awk '{print \$2}'|xargs kill -9 && zenhub run --workers 0 $quoted_args"
}

function zopectl () {
   quoted_args="$(printf " %q" "$@")" # Note: this will have a leading space before the first arg
   ss attach zope su root -l -c "kill $(pgrep python2.7) && su - zenoss -c \"zopectl $quoted_args\""
}

function zenpack () {
   quoted_args="$(printf " %q" "$@")" # Note: this will have a leading space before the first arg
   ss shell --mount '/home/zenoss/src,/home/zenoss/src' zope su zenoss -l -c "zenpack $quoted_args"
}

function shell () {
   quoted_args="$(printf " %q" "$@")" # Note: this will have a leading space before the first arg
   ss shell --mount '/home/zenoss/src,/home/zenoss/src' zope
}

function zpli () {
   zenpack --link --install src/$1
}

function zprm () {
   zenpack --remove src/$1
}

alias zpst="zenpack --list"

function zendmd () {
   quoted_args="$(printf " %q" "$@")" # Note: this will have a leading space before the first arg
   ssaz su zenoss -l -c "zendmd $quoted_args"
}

function zenpython () {
   quoted_args="$(printf " %q" "$@")" # Note: this will have a leading space before the first arg
   ss shell --mount '/home/zenoss/src,/home/zenoss/src' zope su zenoss -l -c "zenpython $quoted_args"
}

function zencommand () {
   quoted_args="$(printf " %q" "$@")" # Note: this will have a leading space before the first arg
   ss shell --mount '/home/zenoss/src,/home/zenoss/src' zope su zenoss -l -c "zencommand $quoted_args"
}

function zenperfsnmp () {
   quoted_args="$(printf " %q" "$@")" # Note: this will have a leading space before the first arg
   ss shell --mount '/home/zenoss/src,/home/zenoss/src' zope su zenoss -l -c "zenperfsnmp $quoted_args"
}

function containsElement () {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

function save_images () {
if [ -d ${IMG_DIR} ]
then
    IMAGES=$(docker images|tail -n +2|awk '{print $1}'|grep -v localhost|grep zenoss)
    for image in $IMAGES
    do
        oimage=$(echo $image | sed 's|/|-SLASH-|g')
        if [ ! -f ${IMG_DIR}/${oimage}.tar ]
        then
            echo "Saving $image"
            docker save $image > ${IMG_DIR}/${oimage}.tar
        fi
    done
fi
}

function restore_images () {
if [ -d ${IMG_DIR} ]
then
    pushd ${IMG_DIR} 2>&1 > /dev/null
    IMAGES=$(docker images|tail -n +2|awk '{print $1}'|grep -v localhost|grep zenoss|sed 's|\n| |g')
    declare -a EXISTING_IMAGES_ARRAY
    EXISTING_IMAGES_ARRAY=($IMAGES)
    files=$(ls zenoss*.tar)
    for file in $files
    do
        img_name=$(echo $file|sed 's/\(.*\)\..*/\1/'|sed 's|-SLASH-|/|g')
        if ! containsElement "$img_name" "${EXISTING_IMAGES_ARRAY[@]}"
        then
            echo "loading $file"
            docker load -i $file
        fi
    done
    popd 2>&1 > /dev/null
fi
}

function cdeploy () {
    restore_images
    st deploy $(stl|grep Zenoss.core.develop|awk '{print $1}') default Dev
    save_images
}

function rdeploy () {
    restore_images
    st deploy $(stl|grep Zenoss.resmgr.develop|awk '{print $1}') default Dev
    save_images
}

function zenoss () {
   if [[ "$1" == "start" ]]; then
       startZenoss
   fi
   if [[ "$1" == "stop" ]]; then
       stopZenoss
   fi
   if [[ "$1" == "restart" ]]; then
       restartZenoss
   fi
   if [[ "$1" == "status" ]]; then
       sss
   fi
}

